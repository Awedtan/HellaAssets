name: Update workflow

on:
  workflow_dispatch:
    inputs:
      server:
        description: "Server to download assets from"
        required: true
        type: choice
        options:
          - cn
          - en
      skip_apk_update:
        description: "Skip APK update"
        required: false
        type: boolean
        default: false
      modify_assets:
        description: "Assets to overwrite"
        required: false
        type: string
        default: ""
      force_downloads:
        description: "ABs to force download"
        required: false
        type: string
        default: ""
      skip_downloads:
        description: "ABs to skip downloading"
        required: false
        type: string
        default: "arts/maps/;arts/shop/;battle/prefabs/effects/;audio/;avg/;building/diy/;lightingdata;scenes/;shaders/"
  workflow_call:
    inputs:
      server:
        required: true
        type: string
      force_downloads:
        required: false
        type: string

permissions:
  contents: write

jobs:
  update:
    name: Download assets
    runs-on: self-hosted
    timeout-minutes: 60
    outputs: # https://stackoverflow.com/questions/70287603/dynamic-outputs-for-job-with-strategy-matrix
      branch-name: ${{ steps.checkout-branch.outputs.branch-name }}
      deploy-spine-condition: ${{ steps.extract-deploy-spine.outputs.condition }}
      enemy-spine-condition: ${{ steps.extract-enemy-spine.outputs.condition }}
      operator-spine-condition: ${{ steps.extract-operator-spine.outputs.condition }}
      update-condition: ${{ steps.download-assets.outputs.condition }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Install dependencies
        working-directory: scripts
        run: |
          sudo apt update
          sudo apt install -y dotnet8 imagemagick jq python3 python3-pip curl tar git sudo sed wget dpkg zip
          pip install -r requirements.txt
          playwright install
          playwright install-deps
          rm -f temp && mkdir temp
          wget -nv https://github.com/aelurum/AssetStudio/releases/download/ak-v1.2.1/ArknightsStudioCLI-net8-Portable.v1.2.1.zip -O temp/ArknightsStudioCLI.zip
          unzip -q temp/ArknightsStudioCLI.zip -d temp/ArknightsStudioCLI
          rm -f temp/ArknightsStudioCLI.zip
          echo "ARKSTUDIOCLI=$(pwd)/temp/ArknightsStudioCLI/ArknightsStudioCLI.dll" >> "$GITHUB_ENV"
      - name: Download assets
        id: download-assets
        working-directory: scripts
        run: |
          python3 download_ab.py                                 \
            --server ${{ inputs.server }}                        \
            --dest temp/download                                 \
            --old-list hot_update_list_${{ inputs.server }}.json \
            --always "${{ inputs.force_downloads }}"             \
            --skip "${{ inputs.skip_downloads }}"                \
          | tee temp/update.out

          if [[ "${PIPESTATUS}" -ne 0 ]]; then
            exit 1
          fi

          if [[ $(cat temp/update.out) == *"Up to date"* ]]; then
            echo "condition=false" >> $GITHUB_OUTPUT
          else
            echo "condition=true" >> $GITHUB_OUTPUT
            if [[ "${{ inputs.server }}" == "cn" ]]; then
              echo "extract=true" >> $GITHUB_OUTPUT
            fi
          fi
      - name: Download APK
        if: steps.download-assets.outputs.condition == 'true'
        working-directory: scripts
        run: |
          if [[ -f "apk_url_${{ inputs.server }}.txt" ]]; then
            LOCAL_URL=$(cat apk_url_${{ inputs.server }}.txt)
          elif [[ "${{ inputs.skip_apk_update }}" == "true" ]]; then
            echo "APK update is to be skipped, but no old URL was found. Skipping APK download."
            exit 0
          fi

          if [[ "${{ inputs.skip_apk_update }}" == "true" ]]; then
            wget "$LOCAL_URL" -O ${{ inputs.server }}.apk
          else
            python3 download_apk.py         \
              --server ${{ inputs.server }} \
              --dest temp/download          \
              --old-url "$LOCAL_URL"        \
            | tee temp/apk.out

            if [[ "${PIPESTATUS}" -ne 0 ]]; then
              exit 1
            fi

            if [[ $(cat temp/apk.out) != *"Up to date"* ]]; then
              unzip -q temp/download/${{ inputs.server }}.apk -d temp/apk
              echo $REMOTE_URL > apk_url_${{ inputs.server }}.txt
            fi
          fi
      - name: Checkout branch
        if: steps.download-assets.outputs.condition == 'true'
        id: checkout-branch
        working-directory: scripts
        run: |
          source utils.sh

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config --global http.postBuffer 524288000
          VERSION=$(cat hot_update_list_${{ inputs.server }}.json | jq -r .versionId)
          BRANCH_NAME=${{ inputs.server }}-$VERSION
          git checkout -b $BRANCH_NAME
          git add . || :
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "update: $BRANCH_NAME"
          fi
          git push -f --set-upstream origin $BRANCH_NAME
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
      - name: Extract enemy assets
        if: steps.download-assets.outputs.extract == 'true'
        run: |
          source scripts/utils.sh

          extract_ab "spritepack/icon_enemies_*.ab" "enemy" "-t sprite -g none --log-level warning"

          mkdir -p enemy
          cp -r scripts/temp/extracted/enemy/* enemy/ || :

          git_commit "${{ inputs.modify_assets }}" "enemy" "Enemy assets"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            git push
          fi
      - name: Extract item assets
        if: steps.download-assets.outputs.extract == 'true'
        run: |
          source scripts/utils.sh

          extract_ab "spritepack/ui_item_*.ab" "items" "-t sprite -g none --log-level warning"

          mkdir -p items
          cp -r scripts/temp/extracted/items/* items/ || :

          git_commit "${{ inputs.modify_assets }}" "items" "Item assets"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            git push
          fi
      - name: Extract operator assets
        if: steps.download-assets.outputs.extract == 'true'
        run: |
          source scripts/utils.sh

          extract_ab "chararts/*.ab" "operator/arts" "--filter-by-text characters -t sprite -g none --log-level warning"
          extract_ab "skinpack/*.ab" "operator/arts" "--filter-by-text characters -t sprite -g none --log-level warning"
          extract_ab "spritepack/ui_char_avatar_*.ab" "operator/avatars" "--filter-by-text char_ -t sprite -g none --log-level warning"
          extract_ab "spritepack/building_ui_buff_skills_h1_0.ab" "operator/bases" "--filter-by-text bskill -t sprite -g none --log-level warning"
          extract_ab "spritepack/ui_equip_big_img_hub_*.ab" "operator/modules" "--filter-by-text uniequip -t sprite -g none --log-level warning"
          extract_ab "spritepack/skill_icons_*.ab" "operator/skills" "--filter-by-text skill_icon -t sprite -g none --log-level warning"

          if [[ -d scripts/temp/extracted/operator ]]; then
            pushd scripts/temp/extracted/operator
            # remove '_#number' at end of filenames
            find . -name "*_#*.png" -print0 | while IFS= read -r -d '' file; do
                if [[ "$file" =~ ^(.*)_#([0-9]+)\.png$ ]]; then
                    mv "$file" "${BASH_REMATCH[1]}.png"
                fi
            done
            popd
          fi

          mkdir -p operator/
          cp -r scripts/temp/extracted/operator/* operator/ || :

          # operator/arts is over 3.5 GB in size, github push limit is 2 GB
          # so repeatedly commit and push a subset of files to stay under the limit
          # this only applies if modified assets are allowed to be added, otherwise assume changes will stay under 2 GB
          if [[ "${{ inputs.modify_assets }}" == *"operator/arts"* ]]; then
            for i in {0..9}; do
              git add operator/arts/char_${i}* || :
              if git diff --cached --quiet; then
                echo "No changes to commit - char_${i}*"
              else
                git commit -m "Operator assets - arts/char_${i}"
                git push
              fi
            done
          fi
          git_commit "${{ inputs.modify_assets }}" "operator/arts" "Operator assets - arts"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            git push
          fi
          git_commit "${{ inputs.modify_assets }}" "operator" "Operator assets"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            git push
          fi
      - name: Extract roguelike assets
        if: steps.download-assets.outputs.extract == 'true'
        run: |
          source scripts/utils.sh

          extract_ab "spritepack/ui_roguelike*.ab" "rogue/items" "-t sprite -g none --log-level warning"

          mkdir -p rogue
          cp -r scripts/temp/extracted/rogue/* rogue/ || :

          git_commit "${{ inputs.modify_assets }}" "rogue" "Roguelike assets"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            git push
          fi
      - name: Extract sandbox assets
        if: steps.download-assets.outputs.extract == 'true'
        run: |
          source scripts/utils.sh

          extract_ab "ui/sandboxperm/[uc]common.ab" "sandbox/items" "--filter-by-text itemicon -t sprite -g none --log-level warning"
          extract_ab "spritepack/sandbox*.ab" "sandbox/stages" "-t sprite -g none --log-level warning"
          extract_ab "ui/sandboxv2/topics/[uc]sandbox_1.ab" "sandbox/weather" "--filter-by-text weathertypeicons -t sprite -g none --log-level warning"

          mkdir -p sandbox
          cp -r scripts/temp/extracted/sandbox/* sandbox/ || :

          git_commit "${{ inputs.modify_assets }}" "sandbox" "Sandbox assets"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            git push
          fi
      - name: Extract skingroups assets
        if: steps.download-assets.outputs.extract == 'true'
        run: |
          source scripts/utils.sh

          extract_ab "ui/skin_groups.ab" "skingroups" "-t sprite -g none --log-level warning"

          if [[ -d scripts/temp/extracted/skingroups ]]; then
            pushd scripts/temp/extracted/skingroups
            # remove 'year#' at start of filenames
            for file in *.png; do
                if [[ "$file" =~ ^[0-9]{4}#(.*) ]]; then
                    mv "$file" "${BASH_REMATCH[1]}"
                fi
            done
            # remove '#number' at end of filenames
            for file in *.png; do
                if [[ "$file" =~ ^(.*)#([0-9]+)\.png$ ]]; then
                    mv "$file" "${BASH_REMATCH[1]}.png"
                fi
            done
            # remove all '_deco' files
            find . -name "*_deco.png" -type f -exec rm -f {} \;
            popd
          fi

          mkdir -p skingroups
          cp -r scripts/temp/extracted/skingroups/* skingroups/ || :

          git_commit "${{ inputs.modify_assets }}" "skingroups" "Skingroups assets"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            git push
          fi
      - name: Extract deployable spine assets
        if: steps.download-assets.outputs.extract == 'true'
        id: extract-deploy-spine
        run: |
          source scripts/utils.sh

          FILES=battle/prefabs/[uc]tokens.ab
          FOLDER=spine/deploy
          mkdir -p scripts/temp/assets/$FOLDER scripts/temp/extracted/$FOLDER
          cp -f scripts/temp/apk/assets/AB/Android/$FILES scripts/temp/assets/$FOLDER || :
          cp -f scripts/temp/download/$FILES scripts/temp/assets/$FOLDER || :
          python3 scripts/spine_deploy.py scripts/temp/assets/$FOLDER scripts/temp/extracted/$FOLDER

          FILES=skinpack/token*.ab
          FOLDER=spine/deploy
          mkdir -p scripts/temp/assets/$FOLDER scripts/temp/extracted/$FOLDER
          cp -f scripts/temp/apk/assets/AB/Android/$FILES scripts/temp/assets/$FOLDER || :
          cp -f scripts/temp/download/$FILES scripts/temp/assets/$FOLDER || :
          python3 scripts/spine_deploy.py scripts/temp/assets/$FOLDER scripts/temp/extracted/$FOLDER

          mkdir -p spine/deploy
          cp -r scripts/temp/extracted/spine/deploy/* spine/deploy/ || :

          git_commit "${{ inputs.modify_assets }}" "spine/deploy" "Deployable spine assets"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            echo "condition=true" >> $GITHUB_OUTPUT
            git push
          else
            echo "condition=false" >> $GITHUB_OUTPUT
          fi
      - name: Extract enemy spine assets
        if: steps.download-assets.outputs.extract == 'true'
        id: extract-enemy-spine
        run: |
          source scripts/utils.sh

          extract_ab "battle/prefabs/enemies/enemy*.ab" "spine/enemy" "-t tex2d,textAsset -g none --log-level warning"
          python3 scripts/spine_enemy.py scripts/temp/extracted/spine/enemy

          mkdir -p spine/enemy
          cp -r scripts/temp/extracted/spine/enemy/* spine/enemy/ || :

          git_commit "${{ inputs.modify_assets }}" "spine/enemy" "Enemy spine assets"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            echo "condition=true" >> $GITHUB_OUTPUT
            git push
          else
            echo "condition=false" >> $GITHUB_OUTPUT
          fi
      - name: Extract operator spine assets
        if: steps.download-assets.outputs.extract == 'true'
        id: extract-operator-spine
        run: |
          source scripts/utils.sh

          FILES=chararts/char*.ab
          FOLDER=spine/operator
          mkdir -p scripts/temp/assets/$FOLDER scripts/temp/extracted/$FOLDER
          cp -f scripts/temp/apk/assets/AB/Android/$FILES scripts/temp/assets/$FOLDER || :
          cp -f scripts/temp/download/$FILES scripts/temp/assets/$FOLDER || :
          python3 scripts/spine_deploy.py scripts/temp/assets/$FOLDER scripts/temp/extracted/$FOLDER

          FILES=skinpack/char*.ab
          FOLDER=spine/operator
          mkdir -p scripts/temp/assets/$FOLDER scripts/temp/extracted/$FOLDER
          cp -f scripts/temp/apk/assets/AB/Android/$FILES scripts/temp/assets/$FOLDER || :
          cp -f scripts/temp/download/$FILES scripts/temp/assets/$FOLDER || :
          python3 scripts/spine_deploy.py scripts/temp/assets/$FOLDER scripts/temp/extracted/$FOLDER

          mkdir -p spine/operator
          cp -r scripts/temp/extracted/spine/operator/* spine/operator/ || :

          git_commit "${{ inputs.modify_assets }}" "spine/operator" "Operator spine assets"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            echo "condition=true" >> $GITHUB_OUTPUT
            git push
          else
            echo "condition=false" >> $GITHUB_OUTPUT
          fi
      - name: Extract stage assets
        if: steps.download-assets.outputs.extract == 'true'
        run: |
          source scripts/utils.sh

          extract_ab "arts/ui/stage_mappreview*.ab" "stages" "-t sprite -g none --log-level warning"

          if ls scripts/temp/extracted/stages/*.png 1> /dev/null 2>&1; then
            mogrify -strip -resize 960x540! scripts/temp/extracted/stages/*.png
          fi

          mkdir -p stages
          cp -r scripts/temp/extracted/stages/* stages/ || :

          git_commit "${{ inputs.modify_assets }}" "stages" "Stage assets"
          if [[ $(cat /tmp/git_commit) -eq 1 ]]; then
            git push
          fi

  spine:
    name: Apply spine transparency
    needs: update
    if: needs.update.outputs.enemy-spine-condition == 'true' || needs.update.outputs.operator-spine-condition == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.update.outputs.branch-name }}
          sparse-checkout: |
            spine
      - name: Download ArkUnpacker source
        run: |
          Set-Location ..
          git clone --recurse-submodules --depth=1 --branch v4.0.1 https://github.com/isHarryh/Ark-Unpacker.git
      - name: Install ArkUnpacker dependencies
        run: pip install bson flatbuffers numpy Pillow pycryptodome pydub "unitypy>=1.22.2"
      - name: Patch ArkUnpacker to encode UTF-8
        run: |
          (Get-Content ..\Ark-Unpacker\src\utils\GlobalMethods.py) -replace '\{text\}', '{text.encode()}' | Set-Content ..\Ark-Unpacker\src\utils\GlobalMethods.py
          (Get-Content ..\Ark-Unpacker\src\utils\GlobalMethods.py) -replace '\{obj\}', '{obj.encode()}' | Set-Content ..\Ark-Unpacker\src\utils\GlobalMethods.py
      - name: Set up deployable spine inputs
        if: needs.update.outputs.deploy-spine-condition == 'true'
        run: |
          @"
          3
          spine/deploy
          ..\combined\deploy


          0
          "@ > ..\deploy.txt
      - name: Apply deployable spine transparency
        if: needs.update.outputs.deploy-spine-condition == 'true'
        run: Get-Content ..\deploy.txt | python ..\Ark-Unpacker\Main.py
      - name: Copy over combined deployable spines
        if: needs.update.outputs.deploy-spine-condition == 'true'
        run: Copy-Item -Path ..\combined\deploy\* -Destination spine/deploy -Recurse -Force
      - name: Clean up files
        if: needs.update.outputs.deploy-spine-condition == 'true'
        run: Remove-Item .\ArkUnpackerLogs.log, .\ArkUnpackerConfig.json
      - name: Commit deployable spine changes
        if: needs.update.outputs.deploy-spine-condition == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add spine/deploy/ || :
          if (git diff-index --quiet HEAD --) {
            Write-Output "No changes to commit."
          } else {
            git commit -m "Deployable spine transparency"
            git push
          }
      - name: Set up enemy spine inputs
        if: needs.update.outputs.enemy-spine-condition == 'true'
        run: |
          @"
          3
          spine/enemy
          ..\combined\enemy


          0
          "@ > ..\enemy.txt
      - name: Apply enemy spine transparency
        if: needs.update.outputs.enemy-spine-condition == 'true'
        run: Get-Content ..\enemy.txt | python ..\Ark-Unpacker\Main.py
      - name: Copy over combined enemy spines
        if: needs.update.outputs.enemy-spine-condition == 'true'
        run: Copy-Item -Path ..\combined\enemy\* -Destination spine/enemy -Recurse -Force
      - name: Clean up files
        if: needs.update.outputs.enemy-spine-condition == 'true'
        run: Remove-Item .\ArkUnpackerLogs.log, .\ArkUnpackerConfig.json
      - name: Commit enemy spine changes
        if: needs.update.outputs.enemy-spine-condition == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add spine/enemy/ || :
          if (git diff-index --quiet HEAD --) {
            Write-Output "No changes to commit."
          } else {
            git commit -m "Enemy spine transparency"
            git push
          }
      - name: Set up operator spine inputs
        if: needs.update.outputs.operator-spine-condition == 'true'
        run: |
          @"
          3
          spine/operator
          ..\combined\operator


          0
          "@ > ..\op.txt
      - name: Apply operator spine transparency
        if: needs.update.outputs.operator-spine-condition == 'true'
        run: Get-Content ..\op.txt | python ..\Ark-Unpacker\Main.py
      - name: Copy over combined operator spines
        if: needs.update.outputs.operator-spine-condition == 'true'
        run: Copy-Item -Path ..\combined\operator\* -Destination spine/operator -Recurse -Force
      - name: Clean up files
        if: needs.update.outputs.operator-spine-condition == 'true'
        run: Remove-Item .\ArkUnpackerLogs.log, .\ArkUnpackerConfig.json
      - name: Commit operator spine changes
        if: needs.update.outputs.operator-spine-condition == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add spine/operator/ || :
          if (git diff-index --quiet HEAD --) {
            Write-Output "No changes to commit."
          } else {
            git commit -m "Operator spine transparency"
            git push
          }

  pr:
    name: Create pull request
    needs: [update, spine]
    if: always() && needs.update.outputs.update-condition == 'true'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github
      - name: Create pull request
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh pr create --title "update: ${{ needs.update.outputs.branch-name }}" --body "Merge ${{ needs.update.outputs.branch-name }} into main" --base main --head ${{ needs.update.outputs.branch-name }} || :
